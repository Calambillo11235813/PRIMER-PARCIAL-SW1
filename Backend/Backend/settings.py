"""
Django settings for Backend project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

import os
from dotenv import load_dotenv
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# cargar .env desde BASE_DIR
load_dotenv(os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'unsafe-default-secret')

# DEBUG should be False in production; control via environment
DEBUG = True 

# Hosts & CORS from environment (comma-separated) — normalizar y sanitizar
ALLOWED_HOSTS = [h.strip() for h in os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',') if h.strip()]

# CORS / CSRF: leer desde .env y sanear entradas
CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS', 'http://localhost:5173').split(',')
CORS_ALLOWED_ORIGINS = [u.strip() for u in CORS_ALLOWED_ORIGINS if u.strip()]
CORS_ALLOW_CREDENTIALS = True

CSRF_TRUSTED_ORIGINS = [u.strip() for u in os.getenv('CSRF_TRUSTED_ORIGINS', 'http://localhost:5173').split(',') if u.strip()]


# Application definition

INSTALLED_APPS = [
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'social_django',
    'corsheaders',  
    'usuario',
    'proyecto',
    'rest_framework',
    'rest_framework_simplejwt',
    'colaboracion_tiempo_real',
     
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # debe ir antes de CommonMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',  # Añade esta línea
                'social_django.context_processors.login_redirect',  # Añade esta línea
            ],
        },
    },
]

WSGI_APPLICATION = 'Backend.wsgi.application'
# ASGI / Channels (activar si se usa Django Channels)
ASGI_APPLICATION = os.getenv('ASGI_APPLICATION', 'Backend.asgi.application')

# Use Redis Channel Layer if REDIS_URL is provided (recommended for production/multi-worker)
REDIS_URL = os.getenv('REDIS_URL', None)
if REDIS_URL:
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [REDIS_URL],
            },
        },
    }
else:
    # Development fallback (single-process)
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels.layers.InMemoryChannelLayer"
        }
    }


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        # soporta nombres provenientes de docker-compose (POSTGRES_*) o de tu .env actual (DB_*)
        'NAME': os.getenv('POSTGRES_DB') or os.getenv('DB_NAME') or 'uml_db',
        'USER': os.getenv('POSTGRES_USER') or os.getenv('DB_USER') or 'uml_user',
        'PASSWORD': os.getenv('POSTGRES_PASSWORD') or os.getenv('DB_PASSWORD') or 'uml_password',
        # Si ejecutas Django dentro de Docker: usar hostname 'postgres' y puerto 5432.
        # Si ejecutas Django en Windows fuera de Docker: usar 'localhost' y el puerto mapeado (5433).
        'HOST': os.getenv('POSTGRES_HOST') or os.getenv('DB_HOST') or 'localhost',
        'PORT': os.getenv('POSTGRES_PORT') or os.getenv('DB_PORT') or '5433',
    }
}

# Permitir override del puerto de la BD vía .env (mantener compatibilidad)
# (asume que DATABASES ya está definido más abajo)
DB_PORT_ENV = os.getenv('POSTGRES_PORT') or os.getenv('DB_PORT') or os.getenv('DATABASE_PORT')
if DB_PORT_ENV and 'DATABASES' in globals() and 'default' in DATABASES:
    DATABASES['default']['PORT'] = DB_PORT_ENV


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = [
    'usuario.backend.AutenticacionPorCorreoBackend',
    'django.contrib.auth.backends.ModelBackend',
]

GOOGLE_OAUTH2_CLIENT_ID = os.environ.get('GOOGLE_OAUTH2_CLIENT_ID')
GOOGLE_OAUTH2_CLIENT_SECRET = os.environ.get('GOOGLE_OAUTH2_CLIENT_SECRET')

LOGIN_URL = 'login'
LOGOUT_URL = 'logout'
LOGIN_REDIRECT_URL = 'http://localhost:5173/'  # Puerto de Vite por defecto
LOGOUT_REDIRECT_URL = '/'

# permitir envío de cookies en CORS (necesario para sesión basada en cookies)
CORS_ALLOW_CREDENTIALS = True

CSRF_TRUSTED_ORIGINS = os.getenv('CSRF_TRUSTED_ORIGINS', 'http://localhost:5173').split(',')

# Configura JWT como autenticación por defecto
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
}

# Si tu clase se llama UsuarioPersonalizado en app 'usuario':
AUTH_USER_MODEL = 'usuario.UsuarioPersonalizado'

# Seguridad adicional para producción
SECURE_HSTS_SECONDS = int(os.getenv('SECURE_HSTS_SECONDS', '0')) if not DEBUG else 0
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Configuración de tiempo de vida de los tokens JWT
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),   # Ejemplo: 15 minutos
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),      # Ejemplo: 7 días
    "ROTATE_REFRESH_TOKENS": True,                    # Opcional: refresca el refresh token en cada uso
    "BLACKLIST_AFTER_ROTATION": True,                 # Opcional: lista negra tras rotación
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
}

# REST framework: restringir por defecto en entornos no-dev
# (evita AllowAny en staging/production)
REST_FRAMEWORK = globals().get('REST_FRAMEWORK', {})
if not globals().get('DEBUG', True):
    REST_FRAMEWORK['DEFAULT_PERMISSION_CLASSES'] = ['rest_framework.permissions.IsAuthenticated']
# ensure REST_FRAMEWORK is set back into globals
globals()['REST_FRAMEWORK'] = REST_FRAMEWORK

# Logging básico (añadir más según necesidades)
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"class": "logging.StreamHandler"},
    },
    "root": {"handlers": ["console"], "level": os.getenv("DJANGO_LOG_LEVEL", "INFO")},
}
